object NotificationCommand "zulip-notifications-command" {
  import "plugin-notification-command"

  command = {{

    log(LogDebug, "zulip-notifications", "Sending notification...reading user configuration")
    var zulip_stream = macro("$zulip_notifications_stream$")
    var icinga2_base_url = macro("$zulip_notifications_icinga2_base_url$")

    var configuration = {
        "vars.zulip_notifications_stream" = zulip_stream,
        "vars.icinga2_base_url" = icinga2_base_url,
    }
    log(LogDebug, "zulip-notifications", "Sending notification...read user configuration successfully: " + Json.encode(configuration))

    log(LogDebug, "zulip-notifications", "Sending notification...reading notification data")
    var notification_type = macro("$notification.type$")
    var notification_author = macro("$notification.author$")
    var notification_comment = macro("$notification.comment$")
    var icinga_long_date_time = macro("$icinga.long_date_time$")
    var service_name = macro("$service.name$")
    var service_display_name = macro("$service.display_name$")
    var service_state = macro("$service.state$")
    var service_check_attempt = macro("$service.check_attempt$")
    var service_last_state = macro("$service.last_state$")
    var service_output = macro("$service.output$")
    var host_name = macro("$host.name$")
    var host_display_name = macro("$host.display_name$")
    var host_state = macro("$host.state$")
    var host_check_attempt = macro("$host.check_attempt$")
    var host_last_state = macro("$host.last_state$")
    var host_output = macro("$host.output$")
    var notification_data = {
        "notification.type" = notification_type,
        "notification.author" = notification_author,
        "notification.comment" = notification_comment,
        "icinga.long_date_time" = icinga_long_date_time,
        "service.name" = service_name,
        "service.display_name" = service_display_name,
        "service.state" = service_state,
        "service.check_attempt" = service_check_attempt,
        "service.last_state" = service_last_state,
        "service.output" = service_output,
        "host.name" = host_name,
        "host.display_name" = host_display_name,
        "host.state" = host_state,
        "host.check_attempt" = host_check_attempt,
        "host.last_state" = host_last_state,
        "host.output" = host_output,
    }
    log(LogDebug, "zulip-notifications", "Sending notification...read notification data successfully: " + Json.encode(notification_data))

    log(LogDebug, "zulip-notifications", "Sending notification...generating notification text")
    var log_output = host_output;
    var short_host_output = null;
    var long_host_output = null;
    if (host_output != null) {
        var host_output_first_line_break = host_output.find("\n")
        if(host_output_first_line_break >= 0) {
            short_host_output = host_output.substr(0, host_output_first_line_break)
            long_host_output = host_output.substr(host_output_first_line_break)
        } else {
            short_host_output = host_output
        }
    }
    if(service_name != null) {
        log_output = service_output;
        var short_service_output = null;
        var long_service_output = null;
        if (service_output != null) {
            var service_output_first_linebreak = service_output.find("\n")
            if(service_output_first_linebreak >= 0) {
                var short_service_output = service_output.substr(0, service_output_first_linebreak)
                var long_service_output = service_output.substr(service_output_first_linebreak)
            } else {
                var short_service_output = service_output
                var long_service_output = ""
            }
         }
    }
    log(LogDebug, "zulip-notifications", "Sending notification...generated notification text successfully: " + log_output)

    log(LogDebug, "zulip-notifications", "Generating notification command")
    var cmd = [
            "/usr/local/share/zulip/integrations/nagios/nagios-notify-zulip",
            "--config=/etc/icinga2/conf.d/zulip-notifications/zuliprc",
            "--stream=" + zulip_stream,
            "--type=" + notification_type,
            "--host=" + escape_shell_arg(host_display_name)
    ]
    if(service_name != null) {
        cmd += [
                "--service=" + escape_shell_arg(service_name),
                "--state=" + service_state,
                "--output=" + escape_shell_arg(short_service_output),
                "--long-output=" + escape_shell_arg(long_service_output)
        ]
    } else {
        cmd += [
                "--state=" + host_state,
                "--output=" + escape_shell_arg(long_host_output),
                "--long-output=" + escape_shell_arg(long_host_output)
        ]
    }
    var notification_command = cmd.join(" ")
    log(LogDebug, "zulip-notifications", "Generated notification command successfully: " + notification_command)

    return notification_command
  }}
}
